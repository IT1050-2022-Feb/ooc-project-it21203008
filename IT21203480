Payment.h 
 
class Payment 
{ private: 
 	int payID;  	char payType[20];  	double payAmount; 
 public: 
 	Payment(); 
 	Payment(int pID,const char ppayType[],double ppayAmount); 
 	void checkPayment();  	void confirmPayment(); 
 	void displayPaymentDetails(); 
 	~Payment(); 
}; 


Payment.cpp  
#include "Payment.h"
#include<cstring> 
 
Payment::Payment() 
{ 
 	payID = 0;  	strcpy(payType, "");  	payAmount = 0; 
} 
 
Payment::Payment(int pID, const char ppayType[], double ppayAmount) 
{ 
 	payID = pID;  	strcpy(payType, ppayType);  	payAmount = ppayAmount; 
}  void Payment::checkPayment() 
{ 
 
}  void Payment::confirmPayment() 
{ 
 
}  void Payment::displayPaymentDetails() 
{ 
 
} 
 
Payment::~Payment() 
{ 
 	//Destructor  
} 


Report.h  
#include"Renting.h" 
#include"Booking.h" 
#include"Payment.h" 
#define SIZE1 5 
#define SIZE2 5 
#define SIZE3 5 
 
class Report 
{ private: 
 	Booking* book[SIZE1]; 
 	Renting* sell[SIZE2];  	Payment* pay[SIZE3]; public: 
 	Report(); 
 	Report(Booking* pbbok[], Renting* psell[], Payment* ppay[]); 
 	void bookingDetailsReport();  	void RentingDetailsReport();  	void paymentDetailsReport(); 
 	~Report(); 
}; 


Report.cpp 
#include "Report.h" 
Report::Report() 
{ 
 	for (int i = 0; i < SIZE1; i++) 
 	{ 
 	 	book[i] = 0; 
 	} 
 	for (int j = 0; j < SIZE2; j++) 
 	{ 
 	 	sell[j] = 0; 
 	} 
 	for (int k = 0; k < SIZE3; k++) 
 	{ 
 	 	pay[k] = 0; 
 	} 
} 
 
Report::Report(Booking* pbbok[], Selling* psell[], Payment* ppay[]) 
{ 
 	for (int i = 0; i < SIZE1; i++) 
 	{ 
 	 	book[i] = pbbok[i]; 
 	} 
 	for (int j = 0; j < SIZE2; j++) 
 	{ 
 	 	sell[j] = psell[j]; 
 	} 
 	for (int k = 0; k < SIZE3; k++) 
 	{ 
 	 	pay[k] = ppay[k]; 
 	} 
}  
void Report::bookingDetailsReport() 
{ 
}  
void Report::sellingDetailsReport() 
{ 
}  
void Report::paymentDetailsReport() 
{ 
} 
 
Report::~Report() 
{ 
 	//Destructor  
 	for (int i = 0; i < SIZE1; i++) 
 	{ 
 	 	delete book[i] ; 
 	} 
 	for (int j = 0; j < SIZE2; j++) 
 	{ 
 	 	delete sell[j] ; 
 	} 
 	for (int k = 0; k < SIZE3; k++) 
 	{ 
 	 	delete pay[k] ; 
 	} 
} 

